#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Chandrayaan3 {
private:
    vector<int> position;
    string direction;

public:
    Chandrayaan3(vector<int> initialPosition, string initialDirection)
        : position(initialPosition), direction(initialDirection) {}

    void move(char command) {
        int dx = 0, dy = 0, dz = 0;

        if (command == 'f') {
            if (direction == "N") dy = 1;
            else if (direction == "S") dy = -1;
            else if (direction == "E") dx = 1;
            else if (direction == "W") dx = -1;
            else if (direction == "Up") dz = 1;
            else if (direction == "Down") dz = -1;
        } else if (command == 'b') {
            if (direction == "N") dy = -1;
            else if (direction == "S") dy = 1;
            else if (direction == "E") dx = -1;
            else if (direction == "W") dx = 1;
            else if (direction == "Up") dz = -1;
            else if (direction == "Down") dz = 1;
        }

        position[0] += dx;
        position[1] += dy;
        position[2] += dz;
    }

    void rotate(char command) {
        string rotations = "WNES";

        size_t index = rotations.find(direction);
        if (index != string::npos) {
            if (command == 'l') direction = rotations[(index + 1) % 4];
            else if (command == 'r') direction = rotations[(index + 3) % 4];
        } else if (command == 'u') {
            if (direction == "N" || direction == "E" || direction == "W") direction = "Up";
            else if (direction == "S" || direction == "Up") direction = "Down";
        } else if (command == 'd') {
            if (direction == "N" || direction == "E" || direction == "W") direction = "Down";
            else if (direction == "S" || direction == "Down") direction = "Up";
        }
    }

    void executeCommands(vector<char> commands) {
        for (char command : commands) {
            if (command == 'f' || command == 'b') move(command);
            else if (command == 'l' || command == 'r' || command == 'u' || command == 'd') rotate(command);
        }
    }

    void printFinalState() {
        cout << "Final Position: (" << position[0] << ", " << position[1] << ", " << position[2] << ")\n";
        cout << "Final Direction: " << direction << "\n";
    }
};

int main() {
    Chandrayaan3 chandrayaan3({0, 0, 0}, "N");
    chandrayaan3.executeCommands({'f', 'r', 'u', 'b', 'l'});
    chandrayaan3.printFinalState();
    return 0;
}
